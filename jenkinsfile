pipeline {
    agent any

    environment {
        registryCredentials = "nexus"
        registry = "192.168.50.10:8083"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/attia12/Pipeline.git'
            }
        }
        stage('Set Permissions') {
            steps {
                sh 'chmod +x ./mvnw'
            }
        }
        stage('Install Docker Compose') {
            steps {
                script {
                    if (sh(script: 'which docker-compose', returnStatus: true) != 0) {
                        sh '''
                            curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                            chmod +x /usr/local/bin/docker-compose
                            ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
                        '''
                    }
                }
            }
        }
        stage('Compile') {
            steps {
                sh './mvnw clean compile'
            }
        }
        stage('Test') {
            steps {
                sh './mvnw test'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv {
                       sh "${scannerHome}/bin/sonar-scanner -X"
                    }
                }
            }
        }
        stage('Building images (mysql)') {
            steps {
                script {
                    sh 'docker-compose build'
                }
            }
        }
        stage('Deploy to Nexus') {
            steps {
                script {
                    docker.withRegistry("http://${registry}", registryCredentials) {
                        sh "docker tag eventapp:5.0 ${registry}/eventapp:5.0"
                        sh "docker push ${registry}/eventapp:5.0"
                    }
                }
            }
        }
    }

    post {
        always {
            junit 'target/surefire-reports/*.xml'
            cleanWs()
        }
    }
}
