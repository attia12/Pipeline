pipeline {
    agent any

    environment {
        registryCredentials = "nexus"
        registry = "192.168.50.10:8083"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/attia12/Pipeline.git'
            }
        }
        stage('Set Permissions') {
            steps {
                sh 'chmod +x ./mvnw'
            }
        }
        stage('Compile') {
            steps {
                sh './mvnw clean compile'
            }
        }
        stage('Test') {
            steps {
                sh './mvnw test'
            }
        }
        stage('Package') {
            steps {
                sh './mvnw package'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv {
                        sh "${scannerHome}/bin/sonar-scanner -X"
                    }
                }
            }
        }
        stage('Building images (mysql)') {
            steps {
                script {
                    // Ensure the Dockerfile is in the root of the project
                    sh 'docker-compose build'
                }
            }
        }
        stage('Deploy to Nexus') {
            steps {
                script {
                    docker.withRegistry("http://${registry}", registryCredentials) {
                        // Debug step to print environment variables
                        sh "env"

                        // Debug step to list Docker images
                        sh "docker images"

                        // Debug step to try a dry-run push (if supported by your Docker version)
                        sh "docker push --dry-run ${registry}/spring-app:5.0"

                        // Actual Docker push
                        sh "docker push ${registry}/spring-app:5.0"
                    }
                }
            }
        }
    }

    post {
        always {
            junit 'target/surefire-reports/*.xml'
            cleanWs()
        }
    }
}
